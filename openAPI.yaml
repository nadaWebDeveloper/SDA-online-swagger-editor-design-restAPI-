openapi: 3.0.0

info:
  title: E-commerce API
  description: API for an E-commerce Website platform
  version: 1.0.0
  contact:
    name: nada yahya
    email: nadayahya@hotmail.com

servers:
  - url: http://localhost:3001
    description: url to API
  

tags:
  - name: products
    description: everything about products
  - name: users
    description: everything about users
  - name: orders
    description: everything about orders  
  - name: categories
    description: everything about categories  


components:
  schemas: 
    product:
      type: object
      required:
        - title
        - price
        - category
      properties:
       id:
        type: string
        description:  the id for product will be automatically generated in the back-end
       title: 
        type: string
        description: the title of the product
       price: 
        type: number
        description: the price of the product     
       description: 
        type: string
        description: the description of the product     
       category: 
        $ref: '#/components/schemas/category'
        description: the category of the product 
       image: 
        type: string
        description: the image of the product 
       rating: 
        type: object
        properties:
          rate:
            type: number
          count:
            type: number
      example:
          id: 0
          title: mac book pro
          price: 11000 $
          description: beautiful mac book pro 
          category: laptop
          image: https://
          rating:
            rate: 3.78
            count: 125

    user:
      type: object
      required:
        - name 
        - email
        - password
      properties:
        id: 
          type: string
          description: the id of user will be automatically 
        name:
            type: string
            description: the name of user 
        email:
             type: string
             description: the email of user  
        password:
              type: string
              description: the password of the user

      example: 
        id: 0
        name: nada
        email: nadayahya2020@hotmail.com
        password: million$$

    order:
      type: object
      required:
        - id 
        - products
        - totalPrice
      properties:
        id: 
          type: string
          description: the id of order will be automatically 
        products:
            type: array
            items: 
              $ref: '#/components/schemas/product'
            description: the items of order 
        totalPrice:
             type: number
             description: the price of the order  

      example: 
        id: 0
        items: iphone 
        totalPrice: 3454 $

    category:
      type: object
      required:
        - id 
        - name
      properties:
        id: 
          type: string
          description: the id of order will be automatically 
        name:
            type: string
            description: the name of category 
        description: 
            type: string
            description: the description of the category        

      example: 
        id: 0
        name: Games 
        description: part of games 
           

paths:
  /products:
    get:
      tags: 
        - products
      summary: get a list of products
      responses:
        200:
          description: all the products are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        500:
          description: server error  

    post:
      tags: 
        - products
      summary: create a products
      requestBody:
        content:
           application/json:
              schema:
                  $ref: '#/components/schemas/product'
      responses:
        201:
          description: single product is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/product'
        500:
          description: server error         


  /products/{productId}:
    get:
      tags: 
        - products
      summary: get a single product
      parameters:
        - in : path
          name: productId
          required: true
          schema:
           type: string

      responses:
        200:
          description: single product is returned by id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/product'
        404:
          description:  product is not found

        500:
          description: server error                             


    delete:
      tags: 
        - products
      summary: delete a single product
      parameters:
        - in : path
          name: productId
          required: true
          schema:
           type: string

      responses:
        200:
          description: delete a single product
        404:
          description:  product is not found 
        500:
          description: server error                                    


    put:
      tags: 
        - products
      summary: update a single product
      parameters:
        - in : path
          name: productId
          required: true
          schema: 
            type: string 
      requestBody:
        content:
           application/json:
            schema:
              $ref: '#/components/schemas/product'
              

      responses:
        200:
          description: update a single product
          content:
           application/json:
              schema:
                  $ref: '#/components/schemas/product'
        404:
          description:  product is not found           
        500:
          description: server error



  /products/searchName:
    get:
      tags: 
        - products
      summary: search products
      parameters:
        - in : query
          name: searchName
          required: true
          schema:
           type: string
      responses:
        200:
          description: search products by name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        404:
          description:  product is not found                
        500:
          description: server error   
          





  /users:
    get:
      tags: 
        - users
      summary: get a list of users
      responses:
        200:
          description: all the users are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        404:
          description:  users is not found 
        500:
          description: server error  

    post:
      tags: 
        - users
      summary: create a user
      requestBody:
        content:
           application/json:
              schema:
                  $ref: '#/components/schemas/user'
      responses:
        201:
          description: single user is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/user'
        404:
          description:  users is not found 
        500:
          description: server error         


  /users/{userId}:
    get:
      tags: 
        - users
      summary: get a single user
      parameters:
        - in : path
          name: userId
          required: true
          schema:
           type: string

      responses:
        200:
          description: single user is returned
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/user'
        404:
          description:  users is not found           
        500:
          description: server error                             


    delete:
      tags: 
        - users
      summary: delete a single user
      parameters:
        - in : path
          name: userId
          required: true
          schema:
           type: string

      responses:
        200:
          description: delete a single user
        404:
          description:  users is not found 
        500:
          description: server error                                    


    put:
      tags: 
        - users
      summary: update a single user
      requestBody:
        content:
           application/json:
            schema:
              $ref: '#/components/schemas/user'
      parameters:
        - in : path
          name: userId
          required: true
          schema: 
            type: string            

      responses:
        200:
          description: update a single user
          content:
           application/json:
              schema:
                  $ref: '#/components/schemas/user'
        404:
          description:  users is not found 
        500:
          description: server error



  /users/searchUserName:
    get:
      tags: 
        - users
      summary: search users
      parameters:
        - in : query
          name: searchUserName
          required: true
          schema:
           type: string
      responses:
        200:
          description: all the users are returned based on thw name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        404:
          description:  users is not found                     
        500:
          description: server error   
          
          
          
          
          
          
          
          


  /orders:
    get:
      tags: 
        - orders
      summary: get a list of orders
      responses:
        200:
          description: all the orders are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'
        404:
          description:  order is not found           
        500:
          description: server error  

    post:
      tags: 
        - orders
      summary: create a order
      requestBody:
        content:
           application/json:
              schema:
                  $ref: '#/components/schemas/order'
      responses:
        201:
          description: single order is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/order'
        404:
          description:  order is not found 
        500:
          description: server error         


  /orders/{orderId}:
    get:
      tags: 
        - orders
      summary: get a single order
      parameters:
        - in : path
          name: orderId
          required: true
          schema:
           type: string

      responses:
        200:
          description: single order is returned
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/order'
        404:
          description:  order is not found           
        500:
          description: server error                             


    delete:
      tags: 
        - orders
      summary: delete a single order
      parameters:
        - in : path
          name: orderId
          required: true
          schema:
           type: string

      responses:
        200:
          description: delete a single order
        404:
          description:  order is not found   
        500:
          description: server error                                    


    put:
      tags: 
        - orders
      summary: update a single order
      requestBody:
        content:
           application/json:
            schema:
              $ref: '#/components/schemas/order'
      parameters:
        - in : path
          name: orderId
          required: true
          schema: 
            type: string            

      responses:
        200:
          description: update a single order
          content:
           application/json:
              schema:
                  $ref: '#/components/schemas/order'
        404:
          description:  order is not found           
        500:
          description: server error



  /orders/search:
    get:
      tags: 
        - orders
      summary: search orders
      parameters:
        - in : query
          name: search
          required: true
          schema:
           type: string
      responses:
        200:
          description: all the orders are returned based on thw name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'
        404:
          description:  order is not found           
        500:
          description: server error     
          
          
          
        


  /categories:
    get:
      tags: 
        - categories
      summary: get a list of categories
      responses:
        200:
          description: all the categories are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category'
        404:
          description:  category is not found           
        500:
          description: server error  

    post:
      tags: 
        - categories
      summary: create a category
      requestBody:
        content:
           application/json:
              schema:
                  $ref: '#/components/schemas/category'
      responses:
        201:
          description: single category is created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/category'
        404:
          description:  category is not found           
        500:
          description: server error         


  /categories/{categoryId}:
    get:
      tags: 
        - categories
      summary: get a single category
      parameters:
        - in : path
          name: categoryId
          required: true
          schema:
           type: string

      responses:
        200:
          description: single category is returned
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/category'
        404:
          description:  category is not found        
        500:
          description: server error                             


    delete:
      tags: 
        - categories
      summary: delete a single category
      parameters:
        - in : path
          name: categoryId
          required: true
          schema:
           type: string

      responses:
        200:
          description: delete a single category
        404:
          description:  category is not found   
        500:
          description: server error                                    


    put:
      tags: 
        - categories
      summary: update a single category
      requestBody:
        content:
           application/json:
            schema:
              $ref: '#/components/schemas/category'
      parameters:
        - in : path
          name: categoryId
          required: true
          schema: 
            type: string            

      responses:
        200:
          description: update a single category
          content:
           application/json:
              schema:
                  $ref: '#/components/schemas/category'
        404:
          description:  category is not found           
        500:
          description: server error



  /categories/search:
    get:
      tags: 
        - categories
      summary: search categories
      parameters:
        - in : query
          name: search
          required: true
          schema:
           type: string
      responses:
        200:
          description: all the categories are returned based on thw name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category'
        404:
          description:  category is not found           
        500:
          description: server error           
          

